// src/api/categorias.js
import { API_CONFIG } from '../config/config.js';
import { getToken } from './auth.js';

// Funci√≥n para mapear datos del backend al frontend
const mapearCategoriaDesdeBackend = (categoriaData) => {
  return {
    idCategoria: categoriaData.id || categoriaData.idcategoria || categoriaData.idCategoria, // ‚úÖ M√∫ltiples opciones
    nombre: categoriaData.nombre,
    cantidadProductos: categoriaData.cantidadProductos || 0,
    createdAt: categoriaData.createdAt,
    updatedAt: categoriaData.updatedAt
  };
};

// Obtener todas las categor√≠as
export const getCategorias = async () => {
  try {
    const token = getToken();
    
    if (!token) {
      throw new Error('No hay token de autenticaci√≥n');
    }

    console.log('üìÇ Obteniendo categor√≠as desde backend...');
    
    const response = await fetch(`${API_CONFIG.BASE_URL}/api/Categorias`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
    });

    console.log('üì• Status de respuesta categor√≠as:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error obteniendo categor√≠as:', errorText);
      throw new Error(errorText || 'Error al obtener categor√≠as');
    }

    const data = await response.json();
    console.log('‚úÖ Categor√≠as obtenidas del backend:', data);
    
    // Mapear los datos al formato del frontend
    const categoriasMapeadas = Array.isArray(data) 
      ? data.map(mapearCategoriaDesdeBackend)
      : [];
    
    return categoriasMapeadas;
    
  } catch (error) {
    console.error('üí• Error en getCategorias:', error);
    throw error;
  }
};

// Crear una nueva categor√≠a
export const crearCategoria = async (categoriaData) => {
  try {
    const token = getToken();
    
    if (!token) {
      throw new Error('No hay token de autenticaci√≥n');
    }

    console.log('üÜï Creando nueva categor√≠a...', categoriaData);
    
    const requestBody = {
      Nombre: categoriaData.nombre
    };
    
    const response = await fetch(`${API_CONFIG.BASE_URL}/api/Categorias`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(requestBody),
    });

    console.log('üì• Status de respuesta crear categor√≠a:', response.status);
    
    if (!response.ok) {
      let errorText;
      try {
        errorText = await response.text();
        console.error('‚ùå Error creando categor√≠a:', errorText);
      } catch (e) {
        errorText = `Error ${response.status}: ${response.statusText}`;
      }
      
      throw new Error(errorText || 'Error al crear categor√≠a');
    }

    const data = await response.json();
    console.log('‚úÖ Categor√≠a creada:', data);
    
    return mapearCategoriaDesdeBackend(data);
    
  } catch (error) {
    console.error('üí• Error en crearCategoria:', error);
    throw error;
  }
};

// Actualizar una categor√≠a
export const actualizarCategoria = async (idCategoria, categoriaData) => {
  try {
    const token = getToken();
    
    if (!token) {
      throw new Error('No hay token de autenticaci√≥n');
    }

    console.log('‚úèÔ∏è Actualizando categor√≠a...', { idCategoria, categoriaData });
    
    const requestBody = {
      Id: idCategoria,
      Nombre: categoriaData.nombre
    };
    
    const response = await fetch(`${API_CONFIG.BASE_URL}/api/Categorias/${idCategoria}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(requestBody),
    });

    console.log('üì• Status de respuesta actualizar categor√≠a:', response.status);
    
    if (!response.ok) {
      let errorText;
      try {
        errorText = await response.text();
        console.error('‚ùå Error actualizando categor√≠a:', errorText);
      } catch (e) {
        errorText = `Error ${response.status}: ${response.statusText}`;
      }
      
      throw new Error(errorText || 'Error al actualizar categor√≠a');
    }

    console.log('‚úÖ Categor√≠a actualizada');
    return true;
    
  } catch (error) {
    console.error('üí• Error en actualizarCategoria:', error);
    throw error;
  }
};

// Eliminar una categor√≠a
export const eliminarCategoria = async (idCategoria) => {
  try {
    const token = getToken();
    
    if (!token) {
      throw new Error('No hay token de autenticaci√≥n');
    }

    console.log('üóëÔ∏è Eliminando categor√≠a...', { idCategoria });
    
    const response = await fetch(`${API_CONFIG.BASE_URL}/api/Categorias/${idCategoria}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
    });

    console.log('üì• Status de respuesta eliminar categor√≠a:', response.status);
    
    if (!response.ok) {
      let errorText;
      try {
        errorText = await response.text();
        console.error('‚ùå Error eliminando categor√≠a:', errorText);
      } catch (e) {
        errorText = `Error ${response.status}: ${response.statusText}`;
      }
      
      throw new Error(errorText || 'Error al eliminar categor√≠a');
    }

    console.log('‚úÖ Categor√≠a eliminada');
    return true;
    
  } catch (error) {
    console.error('üí• Error en eliminarCategoria:', error);
    throw error;
  }
};

// Obtener productos por categor√≠a
export const getProductosPorCategoria = async (idCategoria) => {
  try {
    const token = getToken();
    
    if (!token) {
      throw new Error('No hay token de autenticaci√≥n');
    }

    console.log('üì¶ Obteniendo productos por categor√≠a...', { idCategoria });
    
    const response = await fetch(`${API_CONFIG.BASE_URL}/api/Categorias/${idCategoria}/productos`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
    });

    console.log('üì• Status de respuesta productos por categor√≠a:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error obteniendo productos por categor√≠a:', errorText);
      throw new Error(errorText || 'Error al obtener productos por categor√≠a');
    }

    const data = await response.json();
    console.log('‚úÖ Productos por categor√≠a obtenidos:', data);
    
    return Array.isArray(data) ? data : [];
    
  } catch (error) {
    console.error('üí• Error en getProductosPorCategoria:', error);
    throw error;
  }
};